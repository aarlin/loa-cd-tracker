import{cloneDeep as e}from"lodash";import{EventEmitter as t}from"events";function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var i in s)Object.prototype.hasOwnProperty.call(s,i)&&(e[i]=s[i])}return e},s.apply(this,arguments)}function i(e,t=0,s=10,i=!1){if("number"==typeof e)return isNaN(e)?t:e;let a;try{a=i?parseFloat(e):parseInt(e,s),isNaN(a)&&(a=t)}catch(e){a=t}return a}class a{constructor(e){this.lineSplit=void 0,this.timestamp=void 0,this.lineSplit=e,this.timestamp=new Date(this.lineSplit[1])}}class n extends a{constructor(e){super(e),this.message=void 0,this.message=this.lineSplit[2]}}class o extends a{constructor(e){super(e),this.phaseCode=void 0,this.phaseCode=i(e[2])}}class h extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.classId=void 0,this.class=void 0,this.gearScore=void 0,this.currentHp=void 0,this.maxHp=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity",this.classId=i(e[4]),this.class=e[5]||"UnknownClass",this.gearScore=i(e[7],0,10,!0),this.currentHp=i(e[8]),this.maxHp=i(e[9])}}class m extends a{constructor(e){super(e),this.id=void 0,this.npcId=void 0,this.name=void 0,this.currentHp=void 0,this.maxHp=void 0,this.id=e[2],this.npcId=i(e[3]),this.name=e[4]||"Unknown Entity",this.currentHp=i(e[5]),this.maxHp=i(e[6])}}class l extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.killerId=void 0,this.killerName=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity",this.killerId=e[4],this.killerName=e[5]||"Unknown Entity"}}class r extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.skillId=void 0,this.skillName=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity",this.skillId=i(e[4]),this.skillName=e[5]||"Unknown Skill"}}class d extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.skillId=void 0,this.skillName=void 0,this.skillStage=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity",this.skillId=e[4],this.skillName=e[5]||"Unknown Skill",this.skillStage=i(e[6])}}class c extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.skillId=void 0,this.skillName=void 0,this.skillEffectId=void 0,this.skillEffect=void 0,this.targetId=void 0,this.targetName=void 0,this.damage=void 0,this.damageModifier=void 0,this.currentHp=void 0,this.maxHp=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity",this.skillId=i(e[4]),this.skillName=e[5]||"Unknown Skill",this.skillEffectId=i(e[6]),this.skillEffect=e[7],this.targetId=e[8],this.targetName=e[9]||"Unknown Entity",this.damage=i(e[10]),this.damageModifier=i(e[11],0,16),this.currentHp=i(e[12]),this.maxHp=i(e[13])}}class g extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.healAmount=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity",this.healAmount=i(e[4])}}class u extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.buffId=void 0,this.buffName=void 0,this.isNew=void 0,this.sourceId=void 0,this.sourceName=void 0,this.shieldAmount=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity",this.buffId=e[4],this.buffName=e[5],this.isNew="1"==e[6],this.sourceId=e[7],this.sourceName=e[8]||"Unknown Entity",this.shieldAmount=i(e[9])}}class k extends a{constructor(e){super(e),this.id=void 0,this.name=void 0,this.id=e[2],this.name=e[3]||"Unknown Entity"}}const p={"Serenade of Salvation":{duration:3},"Holy Aura":{duration:16e3},"Holy Protection":{duration:7e3},Demonize:{duration:1500}};var T,I;!function(e){e[e.HIT_OPTION_NONE=-1]="HIT_OPTION_NONE",e[e.HIT_OPTION_BACK_ATTACK=0]="HIT_OPTION_BACK_ATTACK",e[e.HIT_OPTION_FRONTAL_ATTACK=1]="HIT_OPTION_FRONTAL_ATTACK",e[e.HIT_OPTION_FLANK_ATTACK=2]="HIT_OPTION_FLANK_ATTACK",e[e.HIT_OPTION_MAX=3]="HIT_OPTION_MAX"}(T||(T={})),function(e){e[e.HIT_FLAG_NORMAL=0]="HIT_FLAG_NORMAL",e[e.HIT_FLAG_CRITICAL=1]="HIT_FLAG_CRITICAL",e[e.HIT_FLAG_MISS=2]="HIT_FLAG_MISS",e[e.HIT_FLAG_INVINCIBLE=3]="HIT_FLAG_INVINCIBLE",e[e.HIT_FLAG_DOT=4]="HIT_FLAG_DOT",e[e.HIT_FLAG_IMMUNE=5]="HIT_FLAG_IMMUNE",e[e.HIT_FLAG_IMMUNE_SILENCED=6]="HIT_FLAG_IMMUNE_SILENCED",e[e.HIT_FLAG_FONT_SILENCED=7]="HIT_FLAG_FONT_SILENCED",e[e.HIT_FLAG_DOT_CRITICAL=8]="HIT_FLAG_DOT_CRITICAL",e[e.HIT_FLAG_DODGE=9]="HIT_FLAG_DODGE",e[e.HIT_FLAG_REFLECT=10]="HIT_FLAG_REFLECT",e[e.HIT_FLAG_DAMAGE_SHARE=11]="HIT_FLAG_DAMAGE_SHARE",e[e.HIT_FLAG_DODGE_HIT=12]="HIT_FLAG_DODGE_HIT",e[e.HIT_FLAG_MAX=13]="HIT_FLAG_MAX"}(I||(I={}));class _ extends t{constructor(e=!1){super(),this.resetTimer=void 0,this.debugLines=void 0,this.isLive=void 0,this.dontResetOnZoneChange=void 0,this.resetAfterPhaseTransition=void 0,this.splitOnPhaseTransition=void 0,this.removeOverkillDamage=void 0,this.phaseTransitionResetRequest=void 0,this.phaseTransitionResetRequestTime=void 0,this.game=void 0,this.encounters=void 0,this.healSources=void 0,this.resetTimer=null,this.debugLines=!1,this.isLive=e,this.dontResetOnZoneChange=!1,this.resetAfterPhaseTransition=!1,this.splitOnPhaseTransition=!1,this.removeOverkillDamage=!0,this.phaseTransitionResetRequest=!1,this.phaseTransitionResetRequestTime=0,this.resetState(),this.encounters=[],this.isLive&&setInterval(this.broadcastStateChange.bind(this),100)}resetState(){this.debugLines&&this.emit("log",{type:"debug",message:"Resetting state"});const t=e(this.game),s=+new Date;this.game={startedOn:s,lastCombatPacket:s,fightStartedOn:0,entities:{},damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0}},this.healSources=[],this.emit("reset-state",t)}softReset(){this.resetTimer=null;const t=e(this.game.entities);this.resetState();for(const e of Object.keys(t))+new Date-t[e].lastUpdate>6e5||this.updateEntity(t[e].name,{name:t[e].name,npcId:t[e].npcId,class:t[e].class,classId:t[e].classId,isPlayer:t[e].isPlayer,gearScore:t[e].gearScore,maxHp:t[e].maxHp,currentHp:t[e].currentHp})}cancelReset(){this.resetTimer&&clearTimeout(this.resetTimer),this.resetTimer=null}splitEncounter(){const t=e(this.game);0==t.fightStartedOn||0==t.damageStatistics.totalDamageDealt&&!t.damageStatistics.totalDamageTaken||this.encounters.push(t),this.resetState()}broadcastStateChange(){const t=e(this.game);Object.values(t.entities).forEach(e=>{Object.values(e.skills).forEach(e=>{e.breakdown=[]})}),this.emit("state-change",t)}parseLogLine(e){if(!e)return;const t=e.trim().split("|");if(t.length<1||!t[0])return;const s=i(t[0]);try{switch(s){case 0:this.onMessage(t);break;case 1:this.onInitEnv();break;case 2:this.onPhaseTransition(t);break;case 3:this.onNewPc(t);break;case 4:this.onNewNpc(t);break;case 5:this.onDeath(t);break;case 6:this.onSkillStart(t);break;case 7:this.onSkillStage(t);break;case 8:this.onDamage(t);break;case 9:this.onHeal(t);break;case 10:this.onBuff(t);break;case 12:this.onCounterattack(t)}}catch(e){this.emit("log",{type:"error",message:e})}}updateEntity(e,t){const i={lastUpdate:+new Date};this.game.entities[e]=s({},e in this.game.entities?this.game.entities[e]:{lastUpdate:0,id:"",npcId:0,name:"",class:"",classId:0,isPlayer:!1,isDead:!1,deaths:0,deathTime:0,gearScore:0,currentHp:0,maxHp:0,damageDealt:0,healingDone:0,shieldDone:0,damageTaken:0,skills:{},hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0}},t,i)}onMessage(e){const t=new n(e);this.debugLines&&this.emit("log",{type:"debug",message:`onMessage: ${t.message}`}),t.message.startsWith("Arguments:")||this.emit("message",t.message)}onInitEnv(){this.debugLines&&this.emit("log",{type:"debug",message:"onInitEnv"}),this.isLive?!1===this.dontResetOnZoneChange&&null==this.resetTimer&&(this.debugLines&&this.emit("log",{type:"debug",message:"Setting a reset timer"}),this.resetTimer=setTimeout(this.softReset.bind(this),6e3),this.emit("message","new-zone")):(this.splitEncounter(),this.emit("message","new-zone"))}onPhaseTransition(e){const t=new o(e);this.debugLines&&this.emit("log",{type:"debug",message:`onPhaseTransition: ${t.phaseCode}`}),this.isLive&&(this.emit("message",`phase-transition-${t.phaseCode}`),this.resetAfterPhaseTransition&&(this.phaseTransitionResetRequest=!0,this.phaseTransitionResetRequestTime=+new Date)),!this.isLive&&this.splitOnPhaseTransition&&this.splitEncounter()}onNewPc(e){const t=new h(e);this.debugLines&&this.emit("log",{type:"debug",message:`onNewPc: ${t.id}, ${t.name}, ${t.classId}, ${t.class}, ${t.gearScore}, ${t.currentHp}, ${t.maxHp}`}),this.updateEntity(t.name,s({id:t.id,name:t.name,class:t.class,classId:t.classId,isPlayer:!0},t.gearScore&&0!=t.gearScore&&{gearScore:t.gearScore},{currentHp:t.currentHp,maxHp:t.maxHp}))}onNewNpc(e){const t=new m(e);this.debugLines&&this.emit("log",{type:"debug",message:`onNewNpc: ${t.id}, ${t.name}, ${t.currentHp}, ${t.maxHp}`}),this.updateEntity(t.name,{id:t.id,name:t.name,npcId:t.npcId,isPlayer:!1,currentHp:t.currentHp,maxHp:t.maxHp})}onDeath(e){const t=new l(e);this.debugLines&&this.emit("log",{type:"debug",message:`onDeath: ${t.name} ${t.killerName}`});const s=this.game.entities[t.name];let i=0;i=s?s.isDead?s.deaths:s.deaths+1:1,this.updateEntity(t.name,{name:t.name,isDead:!0,deathTime:+t.timestamp,deaths:i})}onSkillStart(e){const t=new r(e);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStart: ${t.id}, ${t.name}, ${t.skillId}, ${t.skillName}`}),Object.keys(p).includes(t.skillName)&&this.healSources.push({source:t.name,expires:+t.timestamp+p[t.skillName].duration}),this.updateEntity(t.name,{name:t.name,isDead:!1});const i=this.game.entities[t.name];i&&(i.hits.casts+=1,t.skillName in i.skills||(i.skills[t.skillName]=s({},{id:0,name:"",totalDamage:0,maxDamage:0,hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0},breakdown:[]},{id:t.skillId,name:t.skillName}),i.skills[t.skillName].hits.casts+=1))}onSkillStage(e){const t=new d(e);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStage: ${t.name}, ${t.skillId}, ${t.skillName}, ${t.skillStage}`})}onDamage(e){if(e.length<13)return;const t=new c(e);this.debugLines&&this.emit("log",{type:"debug",message:`onDamage: ${t.id}, ${t.name}, ${t.skillId}, ${t.skillName}, ${t.skillEffectId}, ${t.skillEffect}, ${t.targetId}, ${t.targetName}, ${t.damage}, ${t.currentHp}, ${t.maxHp}`}),this.phaseTransitionResetRequest&&this.phaseTransitionResetRequestTime>0&&this.phaseTransitionResetRequestTime<+new Date-1500&&(this.softReset(),this.phaseTransitionResetRequest=!1),this.updateEntity(t.name,{id:t.id,name:t.name}),this.updateEntity(t.targetName,{id:t.targetId,name:t.targetName,currentHp:t.currentHp,maxHp:t.maxHp});const i=this.game.entities[t.name],a=this.game.entities[t.targetName];!a.isPlayer&&this.removeOverkillDamage&&t.currentHp<0&&(t.damage=t.damage+t.currentHp),0===t.skillId&&0!==t.skillEffectId&&(t.skillId=t.skillEffectId,t.skillName=t.skillEffect),t.skillName in i.skills||(i.skills[t.skillName]=s({},{id:0,name:"",totalDamage:0,maxDamage:0,hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0},breakdown:[]},{id:t.skillId,name:t.skillName}));const n=15&t.damageModifier,o=(t.damageModifier>>4&7)-1;if("Bleed"===t.skillName&&t.damage>1e7)return;if("Bleed"===t.skillName&&n===I.HIT_FLAG_DAMAGE_SHARE)return;const h=n===I.HIT_FLAG_CRITICAL||n===I.HIT_FLAG_DOT_CRITICAL,m=o===T.HIT_OPTION_BACK_ATTACK,l=o===T.HIT_OPTION_FRONTAL_ATTACK,r=h?1:0,d=m?1:0,g=l?1:0;i.skills[t.skillName].totalDamage+=t.damage,t.damage>i.skills[t.skillName].maxDamage&&(i.skills[t.skillName].maxDamage=t.damage),i.damageDealt+=t.damage,a.damageTaken+=t.damage,"Bleed"!==t.skillName&&(i.hits.total+=1,i.hits.crit+=r,i.hits.backAttack+=d,i.hits.frontAttack+=g,i.skills[t.skillName].hits.total+=1,i.skills[t.skillName].hits.crit+=r,i.skills[t.skillName].hits.backAttack+=d,i.skills[t.skillName].hits.frontAttack+=g),i.isPlayer&&(this.game.damageStatistics.totalDamageDealt+=t.damage,this.game.damageStatistics.topDamageDealt=Math.max(this.game.damageStatistics.topDamageDealt,i.damageDealt),i.skills[t.skillName].breakdown.push({timestamp:+t.timestamp,damage:t.damage,targetEntity:a.id,isCrit:h,isBackAttack:m,isFrontAttack:l})),a.isPlayer&&(this.game.damageStatistics.totalDamageTaken+=t.damage,this.game.damageStatistics.topDamageTaken=Math.max(this.game.damageStatistics.topDamageTaken,a.damageTaken)),0===this.game.fightStartedOn&&(this.game.fightStartedOn=+t.timestamp),this.game.lastCombatPacket=+t.timestamp}onHeal(e){const t=new g(e);this.debugLines&&this.emit("log",{type:"debug",message:`onHeal: ${t.id}, ${t.name}, ${t.healAmount}`});let s="";for(const e of this.healSources)if(e.expires>=+t.timestamp){s=e.source;break}s&&(this.updateEntity(s,{name:s}),this.game.entities[s].healingDone+=t.healAmount,this.game.entities[s].isPlayer&&(this.game.damageStatistics.totalHealingDone+=t.healAmount,this.game.damageStatistics.topHealingDone=Math.max(this.game.damageStatistics.topHealingDone,this.game.entities[s].healingDone)))}onBuff(e){const t=new u(e);this.debugLines&&this.emit("log",{type:"debug",message:`onBuff: ${t.id}, ${t.name}, ${t.buffId}, ${t.buffName}, ${t.sourceId}, ${t.sourceName}, ${t.shieldAmount}`}),t.shieldAmount&&t.isNew&&(this.updateEntity(t.name,{name:t.name}),this.game.entities[t.name].shieldDone+=t.shieldAmount,this.game.entities[t.name].isPlayer&&(this.game.damageStatistics.totalShieldDone+=t.shieldAmount,this.game.damageStatistics.topShieldDone=Math.max(this.game.damageStatistics.topShieldDone,this.game.entities[t.name].shieldDone)))}onCounterattack(e){const t=new k(e);this.debugLines&&this.emit("log",{type:"debug",message:`onCounterattack: ${t.id}, ${t.name}`}),this.updateEntity(t.name,{name:t.name}),this.game.entities[t.name].hits.counter+=1}}export{_ as LogParser};
//# sourceMappingURL=parser.modern.js.map
